1) Debugging
-- Sub/Req:

2) Write test data files
-- Sub/Req: 4, 5, 6

3) Rework center anchor calculations
-- Sub/Req:

4) Add XML for objects
-- Sub/Req:

5) Differentiate rooms in net XML
-- Sub/Req:

6) Add XML for shape grammar
-- Sub/Req: 9

7) Check for collisions during object placement
-- Sub/Req: 8, 17

8) Add rules for invalid object placements
-- Sub/Req: 18

9) Add rules for absolute and other size measures in shape grammar
-- Sub/Req:

10) Add non-programming interfaces
-- Sub/Req:

12) Contact interior designer and architect
-- Sub/Req:

15) Add edge/center spacing to room definition
-- Sub/Req:

16) Further tests of LOCAL/GLOBAL linkages
-- Sub/Req:

17) Add bounding boxes to room objects
-- Sub/Req:

18) Try adding a fail counter to tokens
-- Sub/Req:

19) Work out consequences of transition probabilities
-- Sub/Req:

---------------

Data:
- Grammar
- Objects
- Room Types
-- Spacing Constants
-- Base Objects
-- Sub Objects

Outputs:
- Rooms
- Anchors
- Clutter

Algorithms:
- Shape Grammar (Grammar -> Rooms)
- Room Prep (Room, Room Type -> Anchors)
- Petri Net (Room, Room Type, Objects, Anchors -> Clutter)

----------------

Debug doors
- Make wallOnly flags carry over to subshapes
Add XML interface
Cuts by absolute size

Calculate edge anchors
- Adjust anchors around doors
Calculate center anchors
- Discard anchors too close to existing anchors



		g.beginRule("START");
		g.addToRule("ROOMPART", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("HALLPART", 1.0, 0.25, 2.0, 0.75);
		g.endRule();
		
		g.beginRule("START");
		g.addToRule("ROOMPART", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("HALLPART", 0.25, 1.0, 0.75, 2.0, 1, false);
		g.endRule();
		
		g.beginRule("START");
		g.addToRule("ROOMPART", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("HALLPART", 0.25, -1.0, 0.75, 0.0, 3, false);
		g.endRule();
		
		g.beginRule("START");
		g.addToRule("ROOMPART", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("HALLPART", 0.25, -1.0, 0.75, 0.0, 3, false);
		g.addToRule("HALLPART", 0.25, 1.0, 0.75, 2.0, 1, false);
		g.endRule();
		
		g.beginRule("HALLPART");
		g.addToRule("HALL", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("ROOMPART", 1.0, -0.5, 2.0, 1.5);
		g.endRule();
		
		g.beginRule("HALLPART");
		g.addToRule("HALL", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("ROOMPART", 1.0, -0.5, 2.0, 1.5);
		g.endRule();
		
		g.beginRule("HALLPART");
		g.addToRule("HALL", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("START", 1.0, -0.5, 2.0, 1.5, 0, false);
		g.endRule();

		g.beginRule("HALL");
		g.addToRule("HALLB", 0.0, 0.0, 1.0, 1.0);
		g.endRule();
		
		g.beginRule("HALL");
		g.addToRule("ROOMPART", 0.0, -0.5, 1.0, 1.5);
		g.endRule();
		
		g.beginRule("HALL");
		g.addToRule("HALLB", 0.0, 0.0, 0.5, 1.0);
		g.addToRule("HALLB", 0.5, 0.0, 1.0, 1.0);
		g.endRule();




		// Non-manifold errors
		// Seed: 1100111
		g.beginRule("START");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0);
		g.endRule();

		g.beginRule("START");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("START", 1.0, 0.5, 2.0, 1.5);
		g.endRule(6);
		
		g.beginRule("START");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("START", 1.0, 0.5, 2.0, 1.5, 1);
		g.endRule(2);
		
		g.beginRule("START");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("START", 1.0, -0.5, 2.0, 0.5);
		g.endRule(6);
		
		g.beginRule("START");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0);
		g.addToRule("START", 1.0, -0.5, 2.0, 0.5, 3);
		g.endRule(2);
		


// Maze grammar
		g.beginRule("START");
		g.addToRule("STRAIGHT", 0.0, 0.0, 1.0, 1.0);
		g.endRule();
		g.beginRule("START");
		g.addToRule("LEFT", 0.0, 0.0, 1.0, 1.0);
		g.endRule();
		g.beginRule("START");
		g.addToRule("RIGHT", 0.0, 0.0, 1.0, 1.0);
		g.endRule();
		g.beginRule("START");
		g.addToRule("T", 0.0, 0.0, 1.0, 1.0);
		g.endRule();
		
		g.beginRule("STRAIGHT");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, true, true, false, true);
		g.endRule();
		g.beginRule("STRAIGHT");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, false, true, false, true);
		g.addToRule("START", 1.0, 0.0, 2.0, 1.0);
		g.endRule(50);
		
		g.beginRule("LEFT");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, true, true, false, true);
		g.endRule();
		g.beginRule("LEFT");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, true, true, false, false);
		g.addToRule("START", 0.0, -1.0, 1.0, 0.0, 3);
		g.endRule(50);
		
		g.beginRule("RIGHT");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, true, true, false, true);
		g.endRule();
		g.beginRule("RIGHT");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, true, false, false, true);
		g.addToRule("START", 0.0, 1.0, 1.0, 2.0, 1);
		g.endRule(50);
		
		g.beginRule("T");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, true, true, false, true);
		g.endRule();
		g.beginRule("T");
		g.addToRule("ROOM", 0.0, 0.0, 1.0, 1.0, true, false, false, false);
		g.addToRule("START", 0.0, -1.0, 1.0, 0.0, 3);
		g.addToRule("START", 0.0, 1.0, 1.0, 2.0, 1);
		g.endRule(50);
